/**
 * Trial Rich Information Application Library (TRIAL)
 * Online Education Technology Group (OETG) @ DT Education & Technology
 */
package com.dtedu.trial.interfaces
{
    import flash.display.DisplayObject;
    import flash.events.IEventDispatcher;
    import flash.net.URLRequest;

    /**
     * Dispatched when the loader has completed loading the resource.
     *
     * <p>
     * This event is required to be implemented by every loader implementation.
     * </p>
     *
     * @eventType flash.events.Event.COMPLETE
     */
    [Event(name = 'complete', type = 'flash.events.Event')]

    /**
     * Dispatched when the loader cannot load the resource for any reason.
     *
     * <p>
     * This event is required to be implemented by every loader implementation.
     * </p>
     *
     * @eventType de.mightypirates.utils.events.ResourceErrorEvent.RESOURCE_ERROR
     */
    [Event(name = 'resource_error', type = 'com.dtedu.trial.events.ResourceErrorEvent')]

    /**
     * Dispatched when the loader's progress changed.
     *
     * <p>
     * Note that some loaders may choose not to implement this event.
     * </p>
     *
     * @eventType flash.events.ProgressEvent.PROGRESS
     */
    [Event(name = 'progress', type = 'flash.events.ProgressEvent')]

    /**
     * Interface to a resource loader implementation.
     *
     * <p>
     * In general, resource loaders may not perform any actual "loading", but simply
     * represent an interface to the user (developer) with information on the
     * current load state of a requested resource.
     * </p>
     *
     * <p>
     * Every resource bundle will likely want to implement their own specific
     * implementation, but there is a base class with the most rudimentary
     * functionality available (<code>ResourceLoader</code>).
     * </p>
     *
     * <p>
     * When implementing a <code>IResourceBundle</code>, be aware that the loaders
     * generated by it <em>are not passed on to the requesting code scope</em>,
     * but only used internally in the <code>ResourceProvider</code> class. Due to
     * lack of pointer (ha, ha) the loader implementation returned by the resource
     * provider class is a wrapper class, which will be populated with the final
     * data if a load succeeds, or used to forward an error event if it fails.
     * </p>     
     */
    public interface IResourceLoader extends IEventDispatcher
    {
        /**
         * The resource bundle that was used spawned this loader.
         */
        function get bundle():IResourceBundle;

        /**
         * Loader context used for this loading process (may be null).
         */
        function get loaderContext():*;

        /**
         * The loaded data.
         *
         * <p>
         * The actual type of this depends on what was loaded. In most cases it will
         * be known from the context what a loader was used for to load. If not the
         * datatype getter should be used to decide on how to cast and handle this
         * data.
         * </p>
         *
         * <p>
         * For display objects (IMAGE, SWF) please only use the <code>display</code>
         * property to add elements to stage, instead of directly adding this
         * object, to allow for proper unloading.
         * </p>
         */
        function get data():*;
		
		/**
		 * State context used for passing some data to the place where the complete event is handled.
		 */
		function get stateContext():*;

        /**
         * The type of the loaded data, which may be one of the constants specified
         * in <code>ResourceType</code>.
         */
        function get datatype():String;

        /**
         * This is only used when loading a graphics object (image or swf). In
         * those cases it mimics what the normal Loader class does: provide a
         * container for the actually loaded content, so that it may be added to the
         * display list before loading completes.
         *
         * <p>
         * May be <code>null</code> for some loading operations.
         * </p>
         *
         * <p>
         * Please only use this object to add elements to stage, instead of directly
         * adding the <code>data</code> property, to allow for proper unloading.
         * </p>
         */
        function get display():DisplayObject;

        /**
         * The original URLRequest used to trigger this load.
         */
        function get request():URLRequest;

        /**
         * Unloads the resource loaded via this loader. For some resources which do
         * not require / allow for explicit disposal this may do nothing.
         */
        function unload():void;
		
		/**
		 * Removes any external references including state context, loader result and listeners.
		 * Should be used after finishing handling complete event.
		 */ 
		function detachAndClean():void;
    }
}
